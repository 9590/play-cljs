{:name "Image"
 :top-level? true
 :doc "Image objects are returned by [load-image](#load-image)
and [pre-render](#pre-render). They can be placed in an :image element.

```
(def state (atom {}))

(def main-screen
  (reify p/Screen
    (on-show [this]
      (swap! state assoc :player-image (p/load-image \"player.jpg\")))
    (on-hide [this])
    (on-render [this]
      (p/render game [:image {:value (:player-image @state)}]))
    (on-event [this event])))
```"
 :members [{:name ".loadPixels"
            :arglists ([image])
            :doc "Loads the pixels data for this image into the pixels attribute."}
           {:name ".updatePixels"
            :arglists ([image x y w h])
            :doc "Updates the backing canvas for this image with the contents of the pixels array.

### Parameters

* `x`  x-offset of the target update area for the underlying canvas
* `y`  y-offset of the target update area for the underlying canvas
* `w`  width of the target update area for the underlying canvas
* `h`  height of the target update area for the underlying canvas"}
           {:name ".get"
            :arglists ([image]
                       [image x y]
                       [image x y w h])
            :doc "Get a region of pixels from an image.

### Parameters

* `x`  x-coordinate of the pixel
* `y`  y-coordinate of the pixel
* `w`  width
* `h`  height

### Returns

If no params are passed, those whole Image object is returned.
If x and y are the only params passed, the color of the pixel is returned in array
format: [R, G, B, A].
If all params are passed, a rectangle region is extracted and an Image object is returned.
If the region is outside the bounds of the image, nil is returned."}
           {:name ".set"
            :arglists ([image x y a])
            :doc "Set the color of a single pixel or write an image into this Image object.

Note that for a large number of pixels this will be slower than directly manipulating the pixels
array and then calling [updatePixels](#update-pixels).

### Parameters

* `x`  x-coordinate of the pixel
* `y`  y-coordinate of the pixel
* `a`  grayscale value | pixel array | a [Color](#Color) object | [Image](#Image) object to copy"}
           {:name ".resize"
            :arglists ([image width height])
            :doc "Resize the image to a new width and height. To make the image scale
proportionally, use 0 as the value for the wide or high parameter. For instance, to make
the width of an image 150 pixels, and change the height using the same proportion, use
`(.resize image 150 0)`.

### Parameters

* `width`  the resized image width
* `height`  the resized image height"}
           {:name ".copy"
            :arglists ([image src-image sx sy sw sh dx dy dw dh])
            :doc "Loads the pixels data for this image into the pixels attribute.

### Parameters

* `src-image`  source image object
* `sx`  X coordinate of the source's upper left corner
* `sy`  Y coordinate of the source's upper left corner
* `sw`  source image width
* `sh`  source image height
* `dx`  X coordinate of the destination's upper left corner
* `dy`  Y coordinate of the destination's upper left corner
* `dw`  destination image width
* `dh`  destination image height"}
           {:name ".mask"
            :arglists ([image src-image])
            :doc "Masks part of an image from displaying by loading another image and
using its blue channel as an alpha channel for this image.

### Parameters

`src-image`  source image object"}
           {:name ".filter"
            :arglists ([image operation])
            :doc "Applies an image filter to an Image object.

### Parameters

`operation`  one of \"threshold\", \"gray\", \"invert\", \"posterize\" and \"opaque\""}
           {:name ".blend"
            :arglists ([image src-image sx sy sw sh dx dy dw dh blend-mode])
            :doc "Copies a region of pixels from one image to another, using a
specified blend mode to do the operation.

### Parameters

* `src-image`  source image object
* `sx`  X coordinate of the source's upper left corner
* `sy`  Y coordinate of the source's upper left corner
* `sw`  source image width
* `sh`  source image height
* `dx`  X coordinate of the destination's upper left corner
* `dy`  Y coordinate of the destination's upper left corner
* `dw`  destination image width
* `dh`  destination image height
* `blend-mode`  the blend mode

Available blend modes are: normal | multiply | screen | overlay | darken | lighten | color-dodge |
color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity"}
           {:name ".save"
            :arglists ([image filename extension])
            :doc "Saves the image to a file and force the browser to download it. Accepts two
strings for filename and file extension Supports png (default) and jpg.

### Parameters

* `filename`  give your file a name
* `extension`  \"png\" or \"jpg\""}]}
