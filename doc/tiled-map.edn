{:name "TiledMap"
 :doc "TiledMap objects are returned by [load-tiled-map](#load-tiled-map).
To display, make a :tiled-map element whose :name option is the map name.

The map must be exported from an editor like [Tiled](http://www.mapeditor.org/) in JavaScript
format. The resulting `.js` file must be included in the game's HTML before `main.js`. Lastly,
the name provided to `load-tiled-map` should coorespond to the name saved in that JS file.

```
(def dungeon-map (p/load-tiled-map game \"dungeon\"))

(def main-screen
  (reify p/Screen
    (on-show [this])
    (on-hide [this])
    (on-render [this]
      (p/render game [:tiled-map {:name \"dungeon\"}]))))
```"
 :members [{:name ".getName"
            :arglists ([tiled-map])
            :doc "### Returns

The name of the map"}
           {:name ".getVersion"
            :arglists ([tiled-map])
            :doc "### Returns

The version of the map"}
           {:name ".getOrientation"
            :arglists ([tiled-map])
            :doc "### Returns

The orientation of the map"}
           {:name ".getBackgroundColor"
            :arglists ([tiled-map])
            :doc "### Returns

The background [Color](#Color) of the map"}
           {:name ".getMapSize"
            :arglists ([tiled-map])
            :doc "### Returns

The width and height of the map (in number of tiles) as a [Vector](#Vector)"}
           {:name ".getTileSize"
            :arglists ([tiled-map])
            :doc "### Returns

The width and height of the tiles (in pixels) as a [Vector](#Vector)"}
           {:name ".getHexSideLength"
            :arglists ([tiled-map])
            :doc "### Returns

The side length (only for hexagonal maps)"}
           {:name ".getCamCorner"
            :arglists ([tiled-map])
            :doc "### Returns

The left and top corner coordinates as a [Vector](#Vector)"}
           {:name ".getCamCenter"
            :arglists ([tiled-map])
            :doc "### Returns

The center coordinates as a [Vector](#Vector)"}
           {:name ".getPosition"
            :arglists ([tiled-map])
            :doc "### Returns

Depending on dramMode, returns the camera corner or center coordinates.
Depending on positionMode, returns the Map or Canvas coordinates.
Essentially, you get the coordinates of last draw as a [Vector](#Vector)."}
           {:name ".getCamSize"
            :arglists ([tiled-map])
            :doc "### Returns

The camera's width and height as a [Vector](#Vector)"}
           {:name ".setCamSize"
            :arglists ([tiled-map width height])
            :doc "Only useful for some pre-draw calculations, since Cam
size is always the last Canvas used to draw.

### Parameters

* `width`  cam width
* `height`  cam height"}
           {:name ".getDrawMargin"
            :arglists ([tiled-map])
            :doc "### Returns

Number of tiles to be draw in excess around Canvas. Default: 2"}
           {:name ".setDrawMargin"
            :arglists ([tiled-map margin])
            :doc "### Parameters

* `margin`  Number of tiles to be draw in excess around Canvas. Default: 2"}
           {:name ".getDrawMode"
            :arglists ([tiled-map])
            :doc "### Returns

CORNER or CENTER. Default: CORNER"}
           {:name ".setDrawMode"
            :arglists ([tiled-map mode])
            :doc "Defines the meaning of draw and drawLayer coordinates.
Traditionally, they are camLeft and camTop - the left/top coordinates of the camera,
but with setDrawMode(CENTER), they become the coordinates of the camera center.

### Parameters

* `mode`  CORNER or CENTER"}
           {:name ".getPositionMode"
            :arglists ([tiled-map])
            :doc "### Returns

\"CANVAS\" or \"MAP\". Default: \"CANVAS\""}
           {:name ".setPositionMode"
            :arglists ([tiled-map mode])
            :doc "Defines the meaning of draw and drawLayer coordinates.
Traditionally, the coordinates are read as pixel position.
but with setPositionMode(\"MAP\"), they become Tiles Coordinates.

### Parameters

* `mode`  \"CANVAS\" or \"MAP\""}
           {:name ".getType"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

Layer type (\"tilelayer\", \"imagelayer\" or \"objectgroup\")"}
           {:name ".getVisible"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

Layer visibility."}
           {:name ".setVisible"
            :arglists ([tiled-map layer visible])
            :doc "### Parameters

* `layer`  layer index
* `visible`  true or false"}
           {:name ".getImage"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

[Image](#Image) of an Image Layer."}
           {:name ".getObjects"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

Array of Objects on a Object Layer."}
           {:name ".getObjectsColor"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

[Color](#Color) of an Object Layer. Default: Black."}
           {:name ".getData"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

Data of a Tile Layer."}
           {:name ".getCustomProperties"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

Custom Properties of a Layer."}
           {:name ".getOpacity"
            :arglists ([tiled-map layer])
            :doc "### Parameters

* `layer`  layer index

### Returns

Opacity of a Layer (between 0 and 1)."}
           {:name ".setOpacity"
            :arglists ([tiled-map layer opacity])
            :doc "### Parameters

* `layer`  layer index
* `opacity`  Opacity of a Layer (between 0 and 1)."}
           {:name ".getTileIndex"
            :arglists ([tiled-map layer x y])
            :doc "Returns the tile index. Remember that:
- x and y are Integers.
- 0 is an empty tile.
- The stored tile index is the index indicated by Tiled +1.

### Parameters

* `layer`  layer index
* `x`  horizontal coordinate
* `y`  vertical coordinate

### Returns

Tile index."}
           {:name ".setTileIndex"
            :arglists ([tiled-map layer x y t])
            :doc "Changes a tile index. Remember that:
- x and y are Integers.
- 0 is an empty tile.
- The stored tile index is the index indicated by Tiled +1.

### Parameters

* `layer`  layer index
* `x`  horizontal coordinate
* `y`  vertical coordinate
* `t` tile index"}
           {:name ".canvasToMap"
            :arglists ([tiled-map x y])
            :doc "### Parameters

* `x`  canvas horizontal coordinate
* `y`  canvas vertical coordinate

### Returns

Map coordinates as a [Vector](#Vector)."}
           {:name ".mapToCanvas"
            :arglists ([tiled-map x y])
            :doc "### Parameters

* `x`  map horizontal coordinate
* `y`  map vertical coordinate

### Returns

Canvas coordinates as a [Vector](#Vector)."}
           {:name ".camToCanvas"
            :arglists ([tiled-map x y])
            :doc "### Parameters

* `x`  cam horizontal coordinate
* `y`  cam vertical coordinate

### Returns

Canvas coordinates as a [Vector](#Vector)."}
           {:name ".canvasToCam"
            :arglists ([tiled-map x y])
            :doc "### Parameters

* `x`  canvas horizontal coordinate
* `y`  canvas vertical coordinate

### Returns

Cam coordinates as a [Vector](#Vector)."}
           {:name ".camToMap"
            :arglists ([tiled-map x y])
            :doc "### Parameters

* `x`  cam horizontal coordinate
* `y`  cam vertical coordinate

### Returns

Map coordinates as a [Vector](#Vector)."}
           {:name ".mapToCam"
            :arglists ([tiled-map x y])
            :doc "### Parameters

* `x`  map horizontal coordinate
* `y`  map vertical coordinate

### Returns

Cam coordinates as a [Vector](#Vector)."}]}
